plugins {
    id("com.github.johnrengelman.shadow") version "7.1.1"
    id("io.micronaut.application") version "3.1.1"
    id("com.github.node-gradle.node") version "3.1.1"
}

version = "0.1"
group = "me.juliarn.smartmirror"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("me.juliarn.smartmirror.*")
    }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.data:micronaut-data-r2dbc")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation('org.apache.logging.log4j:log4j-core:2.17.1')
    implementation('org.springframework.security:spring-security-crypto:5.6.2')
    implementation('org.bouncycastle:bcpkix-jdk15on:1.70')
    implementation("commons-logging:commons-logging:1.2")
    runtimeOnly("dev.miku:r2dbc-mysql")
    runtimeOnly("io.r2dbc:r2dbc-h2")
    runtimeOnly('org.apache.logging.log4j:log4j-api:2.17.1')
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.17.0")
    implementation("io.micronaut:micronaut-validation")
    implementation('io.projectreactor:reactor-core:3.4.14')
}

application {
    mainClass.set("me.juliarn.smartmirror.backend.SmartMirrorApplication")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

var frontendDir = "${projectDir}/smartmirror-frontend/" as Object

node {
    nodeProjectDir = file(frontendDir)
}

graalvmNative.toolchainDetection = false

task buildReactApp(type: NpmTask) {
    dependsOn(npmInstall)
    args = ["run", "build"]
}

task includeReactBuild {
    dependsOn(buildReactApp)
    doLast {
        delete("${buildDir}/resources/main/frontend")
        copy {
            from("${frontendDir}/build")
            into("${buildDir}/resources/main/frontend")
        }
    }
}